{"version":3,"sources":["initial-data.js","task.jsx","column.jsx","index.js"],"names":["initialData","tasks","id","content","columns","title","taskIds","columnOrder","Container","styled","div","props","isDragging","Handle","Task","draggableId","this","task","index","provided","snapshot","draggableProps","ref","innerRef","dragHandleProps","React","Component","Title","h3","TaskList","isDraggingOver","Column","column","droppableId","droppableProps","map","key","placeholder","App","state","onDragEnd","result","destination","source","droppableid","start","finish","startTaskIds","Array","from","splice","newStart","finishTasksIds","newFinish","newState","setState","newTaskIds","newColumn","columnId","taskId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f16022b.chunk.js","sourcesContent":["const initialData = {\n  tasks: {\n      'task-1': { id: 'task-1', content: 'Take out the garbage'},\n      'task-2': { id: 'task-2', content: 'Watch my favorite show'},\n      'task-3': { id: 'task-3', content: 'Charge my phone'},\n      'task-4': { id: 'task-4', content: 'Cook dinner'},\n  },\n  columns: {\n      'column-1': {\n          id: 'column-1',\n          title: 'To do',\n          taskIds: ['task-1', 'task-2', 'task-3', 'task-4'],\n      },\n      'column-2': {\n        id: 'column-2',\n        title: 'In progress',\n        taskIds: [],\n      },\n      'column-3': {\n        id: 'column-3',\n        title: 'Done',\n        taskIds: [],\n      },\n  },\n  columnOrder: ['column-1', 'column-2', 'column-3'],\n};\n\nexport default initialData;","import React from 'react';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd';\n\nconst Container = styled.div`\n    border: 1px solid lightgrey;\n    border-raduis: 2px;\n    padding: 8px;\n    margin-bottom: 8px;\n    background-color: ${props => (props.isDragging ? 'lightgreen' : 'white')};\n\n    display: flex\n`;\n\nconst Handle = styled.div`\n    width: 20px;\n    height: 20px;\n    background-color: orange;\n    margin-right: 8px;\n    `;\n\nexport default class Task extends React.Component {\n    render() {\n        return (\n            <Draggable draggableId={this.props.task.id} index={this.props.index}>\n                {(provided, snapshot) => (\n                    <Container\n                        {...provided.draggableProps}\n                        ref={provided.innerRef}\n                        isDragging={snapshot.isDragging}\n                    >\n                        <Handle {...provided.dragHandleProps}/>\n                        {this.props.task.content}\n                    </Container>\n                )}\n            </Draggable>\n        );\n    }\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { Droppable } from 'react-beautiful-dnd';\nimport Task from './task';\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    border-radius: 2px;\n    width: 33%;\n\n    display: flex;\n    flex-direction: column;\n`;\nconst Title = styled.h3`\n    padding: 8px;\n`;\nconst TaskList = styled.div`\n    padding: 8px;\n    transition: background-color 0.2s ease;\n    background-color: ${props => (props.isDraggingOver ? 'skyblue' : 'white')};\n    flex-grow: 1;\n    min-height: 100px;\n`;\n\nexport default class Column extends React.Component {\n    render() {\n        return (\n            <Container>\n                <Title>{this.props.column.title}</Title>\n                <Droppable droppableId={this.props.column.id}>\n                    {(provided, snapshot) => (\n                     <TaskList\n                        ref={provided.innerRef}\n                        {...provided.droppableProps}\n                        isDraggingOver={snapshot.isDraggingOver}\n                     >\n                         {this.props.tasks.map((task, index) => <Task key={task.id} task={task} index={index} />)}\n                         {provided.placeholder}\n                     </TaskList>\n                    )}\n                </Droppable>\n            </Container>\n        )\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport '@atlaskit/css-reset';\nimport styled from 'styled-components';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\n\nconst Container = styled.div`\n    display: flex;\n`;\n\nclass App extends React.Component {\n    state = initialData;\n\n    onDragEnd = result => {\n        const { destination, source, draggableId } = result;\n\n        if (!destination) {\n            return;\n        }\n\n        if (destination.droppableid === source.droppableId && \n            destination.index === source.index) {\n                return;\n        }\n\n        const start = this.state.columns[source.droppableId];\n        const finish = this.state.columns[destination.droppableId];\n\n        if (start === finish ) {\n            const newTaskIds = Array.from(start.taskIds);\n            newTaskIds.splice(source.index, 1);\n            newTaskIds.splice(destination.index, 0, draggableId);\n            \n            const newColumn = {\n                ...start,\n                taskIds: newTaskIds,\n            };\n\n            const newState = {\n                ...this.state,\n                columns: {\n                    ...this.state.columns,\n                    [newColumn.id]: newColumn,\n                }\n            }\n\n            this.setState(newState);\n            return;\n        }\n\n        const startTaskIds = Array.from(start.taskIds);\n        startTaskIds.splice(source.index, 1);\n        const newStart = {\n            ...start,\n            taskIds: startTaskIds,\n        };\n\n        const finishTasksIds = Array.from(finish.taskIds);\n        finishTasksIds.splice(destination.index, 0, draggableId);\n        const newFinish = {\n            ...finish,\n            taskIds: finishTasksIds\n        }\n\n        const newState = {\n            ...this.state,\n            columns: {\n                ...this.state.columns,\n                [newStart.id]: newStart,\n                [newFinish.id]: newFinish,\n            },\n        };\n        this.setState(newState);\n    };\n\n    render() {\n        return (\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <Container>\n                    {this.state.columnOrder.map((columnId) => {\n                    const column = this.state.columns[columnId];\n                    const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n        \n                    return <Column key={column.id} column={column} tasks={tasks}/>;\n                    })}\n                </Container>\n            </DragDropContext>\n        );\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}